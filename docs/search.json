[{"fullname": "plot3d", "modulename": "plot3d", "qualname": "", "type": "module", "doc": "<p>This module can be used to plot the (2 norm) distance between two 2D points for a given grid. Its aim is to visualize\nthe prediction error of an MLP with 2D input and 2D output.</p>\n"}, {"fullname": "plot3d.plot_dist_map", "modulename": "plot3d", "qualname": "plot_dist_map", "type": "function", "doc": "<p>Plot the distance (2 norm) between <code>y_test[i]</code> and <code>y_prediction[i]</code> for all points <code>x_test[i]</code> on the grid <code>x_test</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x_test : (n,2) array\n         list of all points in the grid\ny_test : (n,2) array\nTODO: add other parameters</p>\n", "parameters": ["x_test", "y_test", "y_prediction", "name"], "funcdef": "def"}, {"fullname": "training", "modulename": "training", "qualname": "", "type": "module", "doc": "<p>This module can be used to create an MLP, train it on linear functions, save it, and plot the results. So far, 1D to 1D\nand 2D to 2D functions are supported</p>\n"}, {"fullname": "training.train1d", "modulename": "training", "qualname": "train1d", "type": "function", "doc": "<p>Create an MLP, train it on the 1D to 1D function <code>func_class</code>, save it, and plot the results</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func_class :\n             must contain a static, 1D to 1D function <code>f</code> and a <code>name</code> attribute</p>\n", "parameters": ["func_class"], "funcdef": "def"}, {"fullname": "training.train2d", "modulename": "training", "qualname": "train2d", "type": "function", "doc": "<p>Create an MLP, train it on the 2D to 2D function <code>func_class</code>, save it, and plot the results</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func_class :\n             must contain a static, 2D to 2D function <code>f</code> and a <code>name</code> attribute</p>\n", "parameters": ["func_class"], "funcdef": "def"}, {"fullname": "training.open_model", "modulename": "training", "qualname": "open_model", "type": "function", "doc": "<p>Print the saved model/parameters of an MLP trained on <code>func_class</code> if the model was trained on <code>func_class</code> already</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func_class :\n             function for which the model should be printed</p>\n", "parameters": ["func_class"], "funcdef": "def"}]